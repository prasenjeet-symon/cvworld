// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ADMIN Table
model Admin {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  fullName             String
  profilePicture       String?
  password             String
  reference            String
  premiumTemplatePlans PremiumTemplatePlans[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now())
}

// For the premium plans
model PremiumTemplatePlans {
  id          Int               @id @default(autoincrement())
  planID      String            @unique
  name        String            
  price       Float
  period      SubscriptionCycle
  interval    Int
  currency    String
  description String
  admin       Admin             @relation(fields: [adminId], references: [id])
  adminId     Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
}

// User Model
model User {
  id             Int     @id @default(autoincrement())
  email          String  @unique
  fullName       String
  profilePicture String?
  password       String?
  timeZone       String @default("IST")
  reference      String  @unique

  subscription        Subscription?
  personalDetails     PersonalDetails?
  hobby               Hobby?
  professionalSummary ProfessionalSummary?

  resumes             Resumes[]
  skills              Skills[]
  languages           Languages[]
  courses             Courses[]
  educations          Educations[]
  employmentHistories EmploymentHistories[]
  internships         Internships[]
  links               Links[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  boughtTemplate TemplateBuy[]
  isDeleted      Boolean       @default(false)
}

// subscription 
model Subscription {
  id               Int                       @id @default(autoincrement())
  subscriptionID   String
  subscriptionLink String
  planName         String
  isActive         Boolean
  expireOn         DateTime
  activatedOn      DateTime
  cycle            SubscriptionCycle
  discount         Float
  basePrice        Float
  user             User                      @relation(fields: [userId], references: [id])
  userId           Int                       @unique
  transaction      SubscriptionTransaction[]
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @default(now())
}

model SubscriptionTransaction {
  id             Int                      @id @default(autoincrement())
  amount         Float
  method         PaymentMethod
  eventID        String                   @unique
  card           CardPaymentSubscription?
  upi            UPIPaymentSubscription?
  subscription   Subscription             @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int
}

// UPI payment subscription
model UPIPaymentSubscription {
  id            Int         @id @default(autoincrement())
  transaction     SubscriptionTransaction @relation(fields: [transactionId], references: [id])
  transactionId   Int                     @unique
  vpa           String
  email         String
  mobile        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model CardPaymentSubscription {
  id              Int                     @id @default(autoincrement())
  last4           String
  name            String
  network         String
  type            CardType
  isInternational Boolean
  transaction     SubscriptionTransaction @relation(fields: [transactionId], references: [id])
  transactionId   Int                     @unique
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now())
}

enum SubscriptionCycle {
  MONTHLY
  YEARLY
}

// for the resume
model Resumes {
  id           Int      @id @default(autoincrement())
  resume       Json
  imageUrl     String
  pdfUrl       String
  templateName String
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

// for the user personal details
model PersonalDetails {
  id             Int      @id @default(autoincrement())
  profession     String
  name           String
  email          String
  phone          String
  country        String
  city           String
  address        String
  postalCode     String
  drivingLicense String
  nationality    String
  placeOfBirth   String
  dateOfBirth    DateTime
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

// for the user hobbies
model Hobby {
  id        Int      @id @default(autoincrement())
  hobby     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the user skills 
model Skills {
  id        Int      @id @default(autoincrement())
  skill     String
  level     Float // in the percentage
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the user lan
model Languages {
  id        Int      @id @default(autoincrement())
  language  String
  level     Float
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the user courses
model Courses {
  id          Int      @id @default(autoincrement())
  course      String
  institution String
  startDate   DateTime
  endDate     DateTime
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

// for the user educations
model Educations {
  id          Int      @id @default(autoincrement())
  school      String
  startDate   DateTime
  endDate     DateTime
  degree      String
  city        String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

// for the user employment history
model EmploymentHistories {
  id          Int      @id @default(autoincrement())
  job         String
  employer    String
  startDate   DateTime
  endDate     DateTime
  city        String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

// for the list of internships 
model Internships {
  id          Int      @id @default(autoincrement())
  job         String
  employer    String
  startDate   DateTime
  endDate     DateTime
  city        String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

// for the professional summery
model ProfessionalSummary {
  id        Int      @id @default(autoincrement())
  profile   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the list of user links
model Links {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the contact us form
model ContactUs {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String
  message    String @db.LongText
  isResolved Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

// for the template buy
model TemplateBuy {
  id          Int          @id @default(autoincrement())
  name        String
  price       Int
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  transaction Transaction?
  eventID     String       @unique
}

// for the transaction depend on the template buy
model Transaction {
  id              Int                @id @default(autoincrement())
  template        TemplateBuy        @relation(fields: [templateId], references: [id])
  templateId      Int                @unique
  orderId         String
  amount          Int
  amountPaid      Int
  amountDue       Int
  currency        String
  status          PaymentStatus
  isInternational Boolean
  method          PaymentMethod
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now())
  card            CardPayment?
  UPI             UPIPayment?
  wallet          WalletPayment?
  netBanking      NetBankingPayment?
}

model CardPayment {
  id              Int         @id @default(autoincrement())
  last4           String
  name            String
  network         String
  type            CardType
  isInternational Boolean
  transaction     Transaction @relation(fields: [transactionId], references: [id])
  transactionId   Int         @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
}

model UPIPayment {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @unique
  vpa           String
  email         String
  mobile        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model WalletPayment {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @unique
  name          String
  email         String
  mobile        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model NetBankingPayment {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @unique
  name          String
  email         String
  mobile        String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

// For the resume template buy
model ResumeTemplateMarketplace {
  id            Int      @id @default(autoincrement())
  name          String   @unique // Unique name of the premium template
  displayName   String   @default("")
  displayDescription String @default("")
  price         Float // amount in paise
  previewImgUrl String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

enum CardType {
  CREDIT
  DEBIT
}

// ENUM for payment status
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  WALLET
  NET_BANKING
}
