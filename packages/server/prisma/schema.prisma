// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x", "native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ADMIN Table
model Admin {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  fullName       String
  profilePicture String?
  password       String
  reference      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

// User Model
model User {
  id             Int     @id @default(autoincrement())
  email          String  @unique
  fullName       String
  profilePicture String?
  password       String?
  reference      String  @unique

  subscription        Subscription?
  personalDetails     PersonalDetails?
  hobby               Hobby?
  professionalSummary ProfessionalSummary?

  resumes             Resumes[]
  skills              Skills[]
  languages           Languages[]
  courses             Courses[]
  educations          Educations[]
  employmentHistories EmploymentHistories[]
  internships         Internships[]
  links               Links[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// subscription 
model Subscription {
  id          Int               @id @default(autoincrement())
  planName    String
  isActive    Boolean
  expireOn    DateTime
  activatedOn DateTime
  cycle       SubscriptionCycle
  discount    Float
  basePrice   Float
  user        User              @relation(fields: [userId], references: [id])
  userId      Int               @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
}

enum SubscriptionCycle {
  MONTHLY
  YEARLY
}

// for the resume
model Resumes {
  id        Int      @id @default(autoincrement())
  resume    Json
  imageUrl  String
  pdfUrl    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the user personal details
model PersonalDetails {
  id             Int      @id @default(autoincrement())
  profession     String
  name           String
  email          String
  phone          String
  country        String
  city           String
  address        String
  postalCode     String
  drivingLicense String
  nationality    String
  placeOfBirth   String
  dateOfBirth    DateTime
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

// for the user hobbies
model Hobby {
  id        Int      @id @default(autoincrement())
  hobby     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the user skills 
model Skills {
  id        Int      @id @default(autoincrement())
  skill     String
  level     Float // in the percentage
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the user lan
model Languages {
  id        Int      @id @default(autoincrement())
  language  String
  level     Float
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the user courses
model Courses {
  id          Int      @id @default(autoincrement())
  course      String
  institution String
  startDate   DateTime
  endDate     DateTime
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

// for the user educations
model Educations {
  id          Int      @id @default(autoincrement())
  school      String
  startDate   DateTime
  endDate     DateTime
  degree      String
  city        String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

// for the user employment history
model EmploymentHistories {
  id          Int      @id @default(autoincrement())
  job         String
  employer    String
  startDate   DateTime
  endDate     DateTime
  city        String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

// for the list of internships 
model Internships {
  id          Int      @id @default(autoincrement())
  job         String
  employer    String
  startDate   DateTime
  endDate     DateTime
  city        String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

// for the professional summery
model ProfessionalSummary {
  id        Int      @id @default(autoincrement())
  profile   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the list of user links
model Links {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// for the contact us form
model ContactUs {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  phone      String
  message    String
  isResolved Boolean @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}
